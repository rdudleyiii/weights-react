// tutorial2.js
var CommentBox = React.createClass({
	loadCommentsFromServer() {
		$.ajax({
    		url: this.props.url,
    		dataType: 'json',
    		cache: false,
    		success: function(data) {
    			this.setState({data:data});
    		}.bind(this),
    		error: function(xhr, status, err) {
    			console.error(this.props.url, status, err.toString());
    		}.bind(this)
    	});
	},
	handleCommentSubmit(comment) {
		var comments = this.state.data;
	    // Optimistically set an id on the new comment. It will be replaced by an
	    // id generated by the server. In a production application you would likely
	    // not use Date.now() for this and would have a more robust system in place.
	    var checkAuthor = function() {
	    	return _.findIndex(comments, {'author': comment.author});
	    };	

	    var authorIndex = checkAuthor();

	    if (authorIndex >= 0) {
	    	comments[authorIndex].text = comment.text;
	    	var newComments = comments;
		    this.setState({data: newComments});
	
	    	//put
	    	$.ajax({
				url: this.props.url,
				dataType: 'json',
				type: 'PUT',
				data: comment,
				success: function(data) {
					this.setState({data:data});
				}.bind(this),
				error: function(xhr, status, err) {
					this.setState({data: comments});
					console.error(this.props.url, status, err.toString());
				}.bind(this)
			});
	    } else {
			comment.id = Date.now();
	    	var newComments = comments.concat([comment]);
		    this.setState({data: newComments});
	
	    	//post
	    	$.ajax({
				url: this.props.url,
				dataType: 'json',
				type: 'POST',
				data: comment,
				success: function(data) {
					this.setState({data:data});
				}.bind(this),
				error: function(xhr, status, err) {
					this.setState({data: comments});
					console.error(this.props.url, status, err.toString());
				}.bind(this)
			});
	    }
	},
	getInitialState() {
	    return {data: []};
	},
	componentDidMount() {
		this.loadCommentsFromServer();
		setInterval(this.loadCommentsFromServer, this.props.pollInterval)
	},
	render() {
		return (
			<div className="commentBox">
				<h1>2016 USA Weightlifting National Champions</h1>
				<CommentList data={this.state.data} />
				<CommentForm onCommentSubmit={this.handleCommentSubmit} />
			</div>
		);
	}	
});

var CommentList = React.createClass({
    render() {
    	var commentNodes = this.props.data.map(function(comment) {
    		return (
    			<Comment author={comment.author} key={comment.id}>
    				{comment.text}
    			</Comment>
			)
    	});
    	return (
    		<div className="commentList">{commentNodes}</div>
		);
    }
});

var CommentForm = React.createClass({
    getInitialState() {
        return {
            author: '', text: ''  
        };
    },
    handleAuthorChange(e) {
    	this.setState({author: e.target.value})
    },
    handleTextChange(e) {
		this.setState({text: e.target.value})
    },
    handleSubmit(e) {
    	e.preventDefault();
    	var author = this.state.author.trim();
    	var text = this.state.text.trim();

    	if (!text || !author) {
    		return;
    	}

    	this.props.onCommentSubmit({author: author, text: text})
    	this.setState({author: '', text: ''})
    },
    render() {
        return (
            <form className="commentForm" onSubmit={this.handleSubmit}>
            	<div className="form-group">
		        	<input className="form-control" type="text" placeholder="Athlete Name" value={this.state.author} onChange={this.handleAuthorChange} />
		        	<input className="form-control" type="text" placeholder="Weight Class" value={this.state.text} onChange={this.handleTextChange}/>
		        	<input className="btn btn-primary btn-block" type="submit" value="Post" />
	        	</div>
      		</form>
        );
    }
});

var Comment = React.createClass({
	rawMarkup: function () {
		var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
		return { __html: rawMarkup};
	},
	render: function() {
		return (
			<div className="comment">
				<h2 className="commentAuthor">{this.props.author}</h2>
				<span dangerouslySetInnerHTML={this.rawMarkup()} />
			</div>
		);
	}
});

ReactDOM.render(
	<CommentBox url="/api/comments" pollInterval={2000}/>,
	document.getElementById('content')
);